{hudson-plugin-info:artifactory}
{excerpt}This plugin allows deploying Maven 2, Maven 3, Ivy and Gradle artifacts and build info to the Artifactory artifacts manager.{excerpt}
{tip: title=Reporting Issues}Issues for this plugin are managed primarily on the plugin's project under the *[JFrog JIRA|http://issues.jfrog.org/jira/browse/HAP]*.
Managing independent release versions and having sub-components for each build technology requires the plugin to be a first-level JIRA project, which is currently not possible under the Jenkins-provided JIRA.{tip}
\\

h2. TABLE OF CONTENTS
{toc:maxLevel=1}

h1. Introduction

The Jenkins Artifactory Plugin brings [Artifactory's Build Integration|http://wiki.jfrog.org/confluence/display/RTF/Build+Integration] support to Jenkins. This integration allows your build jobs to deploy artifacts automatically to Artifactory and have them linked to the build job that created them.
As part of deployment additional information is recorded by the plugin to give you full visibility of deployed artifacts, used dependencies and information about original build environment. As an important side affect the plugin also supports optimized end-of-build-only deployment.
The plugin uses the Artifactory [REST API|http://wiki.jfrog.org/confluence/display/RTF/Artifactory%27s+REST+API] for build management that can be used by other clients as well.
To learn more about the Artifactory-side of the Jenkins Artifactory Plugin, please read the documentation on the [JFrog wiki|http://wiki.jfrog.org/confluence/display/RTF/Jenkins+%28Hudson%29+Artifactory+Plug-in].

h1. Requirements

This plugin requires Artifactory 2.2.3 or later and Jenkins 1.358 or later.
Release management and build isolation requires Artifactory 2.3.3 or later and Jenkins 1.400 or later.
The plugin currently supports *Maven 2*, *Maven 3*, *Gradle* and *Ivy-Ant* builds.

h1. Artifactory Plugin Configuration

From the Jenkins System Configuration Page (Manage Jenkins \-> Configure System) we can configure the Artifactory Plugin details.

Check the "User Credentials plugin" check-box, in case you wish to use Jenkins' Credentials Plugin to configure your Artifactoey Servers credentials in the your Jenkins job configuration pages.

Next configure the Artifactory server (or servers) that will be used for artifacts resolution and for artifacts and build info deployment.
In the "Artifactory servers" configuration section, click the "Add" button and fill-in the Artifactory URL and optionally a username and password that will be used to query Artifactory for a list of target repositories (this is only required if Artifactory is configured not to allow anonymous access).
You can also set the default deployer credentials (and the default resolver credentials used by some build types) that will be used by individual jobs when publishing and resolving to/from Artifactory. !ServersConfig900.jpg|border=1!

{note}
The _Deployer_ user specified above must have _Deploy_ permission in Artifactory. Log into Artifactory with Administrator privilege, go&nbsp;_Security \| Permissions_ in the _Admin_ tab. &nbsp;Grant _Deploy_ permission to the _Deployer_ user (or perhaps better, a group to which the user belongs).{note}

h1. Configuring Maven 2 and Maven 3 Builds

Once at least one Artifactory server is configured we can add the plugin as a post-build step in a Maven 2/3 build. To do this, create or edit a Maven 2/3 build project.
!maven2.png|border=1!

Resolve artifacts from Artifactory, can be distinguish between repositories that resolves Snapshot artifacts and repositories that resolves Release artifacts.
!resolve.png|border=1!

The build&nbsp;*Goals and options*&nbsp;should be set to&nbsp;*clean install*

!MavenInstallGoal.png|border=1!

\\
{note:title=Maven 3 Support for Jenkins Free-style Jobs}The Jenkins Artifactory plugin supports running Maven 3 builds from free-style jobs by using a Maven 3 build step + a build environment section for the Artifactory Maven 3 integration (artifact and build information deployment). For Maven 3 builds users are encouraged to configure the Artifactory integration using Jenkins' native Maven 2/3 build projects.{note}

h1. Configuring Gradle Builds

You can use the [Jenkins Gradle Plugin|Gradle Plugin] (configured under a free-style job) in conjunction with the Jenkins Artifactory Plugin and have your Gradle builds resolve artifacts from Artifactory and deploy artifacts and build information to Artifactory.
To help you get started, you can use [gradle-example-ci-server|https://github.com/JFrogDev/project-examples/tree/master/gradle-examples]&nbsp;as a sample project you can build from your Jenkins Gradle job.

!gradle.png|border=1!

h1. Configuring Ivy-Ant Builds

By using the [Jenkins Ivy Plugin|Ivy Plugin] together with the Jenkins Artifactory Plugin your Ivy builds will publish artifacts and build information to Artifactory whenever an {{ivy:publish}} task is executed.
{info:title=Install the Jenkins Ivy Plugin}To use the Jenkins Artifactory Plugin with Ivy builds you need to install the [Jenkins Ivy Plugin|Ivy Plugin].{info}
Publishing to your local file cache repository is the best way to go (i.e. you do not need to publish to Artifactory). The plugin will intercept the publish events and will replay them against Artifactory according to the configuration. Using an {{ivy:publish}} task that publishes directly to Artifactory will result in (redundant) double publishing.
!ivy-9.1.2011.gif|border=1!

h1. Configuring Generic (Freestyle) Builds

Generic build integration provides Build Info support for any build type. This allows custom builds, such as non-Java builds to:
# Upload any artifacts to Artifactory, together with custom properties metadata, and keep published artifacts associated with the Jenkins build.
# Download artifacts from Artifactory that are required by your build.

You can define the artifacts to upload and download by either using "File Specs" or "Legacy Patterns".

h2. File Specs

File Spec are specified in JSON format.
You can use File Specs in one of the following ways:

# Manage them in your SCM, and then during the build, have them pulled to the workspace with the other sources. If you choose this option, you should select the "File" option in the "Upload spec source" or "Download spec source" field and specify the relative path to the File Spec in your workspace.
# Save the File Spec JSON as part of the job configuration. If you choose this option, you should select the "Job configuration" option in the "Upload spec source" or "Download spec source" field and specify the File Spec JSON content in your workspace in the "File path" field.

You can read the File Spec schema [here|https://www.jfrog.com/confluence/display/RTF/Using+File+Specs].

h2. Legacy Patterns (deprecated)

Legacy patterns are deprecated since version 1.8.0 and will be removed in future releases.

# The 'Published Artifacts' section lets you specify which artifact files produced by the build will be published to Artifactory.
At the end of the build run, artifacts in the build's workspace directory will be selected according to the specified patterns and will be published to Artifactory.
\\
\\
The 'Resolved Artifacts' section lets you specify which artifact files you wish to resolve from Artifactory.
Before the build starts, Jenkins will download these artifacts from Artifactory so the build can use them as dependencies.
\\
\\
Optionally, you can also map the target path of deployed/resolved artifacts.
!generic.png|border=1!

h1. Multi-Configuration (Freestyle) Builds

A [multi-configuration project|https://wiki.jenkins-ci.org/display/JENKINS/Building+a+matrix+project]&nbsp;can be used to avoid duplicating many similar steps that would otherwise be made by different builds.
The plugin is used in the same way as the other Freestyle builds, but under "Deploy artifacts to Artifactory" you will find a mandatory \*Combination Matches&nbsp;*field where you can enter the&nbsp;specific matrix combinations to which the plugin will deploy the artifacts.

h6. !multi-conf-project.PNG|border=1!


h6. *Combination Matches field*:

Here you can specify build combinations that you want to&nbsp;*deploy*&nbsp;through a Groovy expression that returns true or false.
When you specify a Groovy expression here, only the build combinations that result in&nbsp;*true*&nbsp;will be deployed to Artifactory. In evaluating the expression, multi-configuration axes are exposed as variables (with their values set to the current combination evaluated).
The Groovy expression uses the same syntax used in&nbsp;*Combination Filter*&nbsp;under&nbsp;*Configuration Matrix*&nbsp;
For example, if you are building on different agents for different jdk`s you would specify the following:
| {color:#333333}Deploy "if both linux and jdk7, it's invalid "{color} | {color:#333333}\!﻿﻿(label=="linux" && jdk=="jdk7"{color}\\ |
| {color:#333333}Deploy "if on master, just do jdk7 "{color}\\ | {color:#333333}(label=="master").implies(jdk=="jdk7"){color} |
{info:title=Important Note}Deployment of the same Maven artifacts by more than one matrix job is not supported\!{info}

h1. Release Management with Staging and Promotion

The Artifactory plugin supports release management for Maven and Gradle builds. [Read detailed instructions here|Jenkins Artifactory Plugin - Release Management].

h1. Working With the Pipeline Jenkins Plugin

The Artifactory plugin support Artifactory operations as part of the Jenkins Pipeline script DSL [Read detailed instructions here|Artifactory - Working With the Pipeline Jenkins Plugin].

h1. Push to Bintray

!p2b2.JPG|border=1,width=245,height=176!
From Artifactory 3.5.3, Bintray users can use this feature to promote the build directly from Jenkins.

!p2b3.JPG|border=1,width=237,height=51!
This can be done for staged or unstaged builds via the "Push to Bintray" page in one of the following ways:

# You can attach a descriptor file&nbsp; to the artifacts and click "Push to Bintray" with no additional configuration.
# If you did supply a descriptor file, you can override it: by checking "Override descriptor file" checkbox and fill in the fields in the configuration page.
This will make Artifactory completely ignore the descriptor file. Only the values you set in Jenkins will be considered and
all others will be omitted.
# If you did not supply a descriptor file, you can use the "Push to Bintray" configuration page to provide the minimal settings required by Bintray.

{info:title=Bintray minimal requirements}
OSS users of Bintray: you must fill in all fields in order for the push to succeed.
Premium account users: you may ignore the "licences" and "VCS URL" fields.{info}

h1. License Control

You use the Artifactory Pro [License Control|http://wiki.jfrog.org/confluence/display/RTF/License+Control] feature to discover and handle third party dependency licensing issues as part of the build.
Check the *'Run license checks'* option if wish that Artifactory will scan and check the licenses of all dependencies used by this build. If you wish to inform selected users about any license violations detected while scanning, you may enter a white-spaced list of e-mail addresses to the notification recipients text box.
{anchor:jiraIntegration}

h1. JIRA Integration

The Jenkins plugin may be used in conjunction with the [Jenkins JIRA plugin|https://wiki.jenkins-ci.org/display/JENKINS/JIRA+Plugin] to record the build's affected issues, and include those issues in the Build Info descriptor inside Artifactory and as searchable properties on deployed artifacts.
To activate the JIRA integration, make sure that Jenkins is set with a valid JIRA site configuration and select the *Enable JIRA Integration* in the job configuration page:
!jiraIntegration.png|border=1!

h3. Aggregating Issues from Previous Builds

It is possible to collect under a build deployed to Artifactory all JIRA issues affected by this build as well as previous builds. This allows you, for example, to see all issues between the previous release to the current build, and if the build is a new release build - to see all issues addresses in the new release.
To accumulate JIRA issues across builds, check the "Aggregate issues from previous builds" option and configure the last build status the aggregation should begin from. The default last status is "Released" (case insensitive), which means aggregation will begin from the first build after the last "Released" one.
!jiraIssuesAggregation.png|border=1!
{anchor:buildIsolation}

h1. Build Isolation

When executing the same chain of integration (snapshot) builds in parallel, a situation may arise in which downstream builds resolve snapshot dependencies which are not the original dependencies existing when the build was triggered.
This can happen when a root upstream build has run and triggered downstream builds that depend on its produced artifacts. Then the upstream has run again before the running downstream builds has finished, so these builds may resolve newly created upstream artifacts that are not meant for them, leading to conflicts.
!buildisolation.png|border=1!

h3. Solution

The Jenkins plugin offers a new checkbox for its Maven/Gradle builds 'Enable isolated resolution for downstream builds' which plants a new 'build.root' property that is added to the resolution URL.
This property will then be read by the *direct* children of this build and implanting them in their resolution URLs respectively, thus guaranteeing that the parent artifact resolved is the one that was built prior to the build being run.

h5. Maven

In order for Maven to use the above feature, the checkbox needs to be checked for the root build only, and make sure that all artifacts are being resolved from Artifactory by using the 'Resolve artifacts from Artifactory' feature. This will enforce Maven to use the resolution URL with Maven builds, alongside with the 'build.root' property as a matrix param in the resolution URL.

h5. Gradle

Once the 'Enable isolated resolution for downstream builds' has been checked, the build.root property will be added to all existing resolvers.

h1. Excluded artifacts and the BuildInfo

!exclude_artifacts_from_build.png|border=1!
By default when providing exclude patterns for artifacts, they will not get deployed into Artifactory but they will get included in the final BuildInfo JSON.
By marking the "Filter excluded artifacts from build Info" the excluded artifacts will appear in a different section inside the BuildInfo and by this providing a clear understanding of the entire Build.
This is also crutial for the promotion procedure, since it scans your BuildInfo JSON and trying to promote all the artifacts there, it will fail when you excluded artifacts unless you mark this option.

h1. Discarding Old Builds

The Jenkins project configuration lets you specify a policy for handling old builds.

!JenkinsDiscardBuilds.png|border=1!

You can delete old builds based on age or number as follows:
| *Days to keep builds* | The number of days that a build should be kept before it is deleted |
| *Max # of builds to keep* | The maximum number of builds that should be kept. When a new build is created, the oldest one will be deleted |

Once these parameters are defined, in the *Post-build Actions* section, you can specify that Artifactory should also discard old builds according to these settings as follows:
!JenkinsAFDiscardBuilds.png|border=1!
| *Discard old builds from Artifactory* | Configures Artifactory to discard old builds according to the Jenkins project settings above |
| *Discard build artifacts* | Configures Artifactory to also discard the artifacts within the build |

h1. Configuring repositories with variables

!reposVariable.JPG|border=1,width=1087,height=97!

You can select text mode in which you can type out your target repository.
In your target repository name, you can use variables that will be dynamically replaced with a value at build time.
The variables should be specified with a dollar-sign prefix and be enclosed by curly brackets.
For example: $\{deployRepository\}, $\{resolveSnapshotRepository\}, $\{repoPrefix\}-$\{repoName\} etc.
The variables are replaced by values from one of the following job environments:

# Predefined Jenkins environment variables.
# Jenkins properties (Read more in [Jenkins Wiki|https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project])
# Parameters configured in the Jenkins configuration under the "This build is parameterized" section - these parameters could be replaced by a value from the UI or using the Jenkins REST API.
# Injected variables via one of the Jenkins plugins ("EnvInject" for example).

h1. Dynamically Disabling Deployment of Artifacts and Build-info

{color:#333333}Maven, Gradle and Ivy jobs can be configured to deploy artifacts and/or build information to Artifactory.&nbsp;For example, in the case of Gradle builds, you&nbsp;{color}{color:#333333}would set the&nbsp;{color}{color:#333333}{*}{_}Publishing repository{_}{*}{color}{color:#333333}&nbsp;field and check&nbsp;{color}{color:#333333}{*}Capture and publish build-info.&nbsp;*{color}{color:#333333}Maven and Ivy have similar (although slightly different) configuration parameters. By setting these parameters, you can configure each build tool respectively to deploy build artifacts and/or build information to Artifactory. However, there may be specific cases in which you want to override this setting and disable deploying artifacts and build information. In these cases, you can pass the following two system properties to any of the build tools:{color}
* {color:#333333}artifactory.publish.artifacts{color}
* {color:#333333}artifactory.publish.buildInfo{color}
{color:#333333}For example, for a Maven build, you can add these system properties to the&nbsp;{color}{color:#333333}{*}Goals and options{*}{color}{color:#333333}&nbsp;field as follows:{color}

{code}
clean install -Dartifactory.publish.artifacts=false -Dartifactory.publish.buildInfo=false
{code}
{color:#333333}To control these properties dynamically, you can replace the values with Jenkins variables or Environment variables that you define as follows:{color}

{code}
clean install -Dartifactory.publish.artifacts=$PUBLISH_ARTIFACTS -Dartifactory.publish.buildInfo=$PUBLISH_BUILDINFO
{code}

h1. Watch the Screencast

To see the Jenkins Artifactory Integration in action you can watch the following [screencast|http://www.youtube.com/user/artifrog#p/u/3/82sWH-5ooS8].


h1. Changelog


h2. 2.9.0 (7 Jan 2017)

# Add to file spec the ability to download artifact by build name and number ([HAP-865|https://www.jfrog.com/jira/browse/HAP-865])
# Support Release Management as part of the Pipeline DSL ([HAP-797|https://www.jfrog.com/jira/browse/HAP-797])
# Capture docker build-info from all agents proxies ([HAP-868|https://www.jfrog.com/jira/browse/HAP-868])
# Support for Xray scan build feature ([HAP-866|https://www.jfrog.com/jira/browse/HAP-866])
# Support customised build name ([HAP-869|https://www.jfrog.com/jira/browse/HAP-869])
# Change file Specs pattern ([HAP-876|https://www.jfrog.com/jira/browse/HAP-876])
# Bug fixes ([HAP-872|https://www.jfrog.com/jira/browse/HAP-872],&nbsp;[HAP-873|https://www.jfrog.com/jira/browse/HAP-873],&nbsp;[HAP-870|https://www.jfrog.com/jira/browse/HAP-870],&nbsp;[HAP-856|https://www.jfrog.com/jira/browse/HAP-856],&nbsp;[HAP-862|https://www.jfrog.com/jira/browse/HAP-862])

h2. 2.8.2 (6 Dec 2016)

# Support promotion fail fast ([HAP-803|https://www.jfrog.com/jira/browse/HAP-803])
# Enable setting the JDK for Maven/Gradle Pipeline API ([HAP-848|https://www.jfrog.com/jira/browse/HAP-848])
# Support environment variables within Pipeline specs ([HAP-849|https://www.jfrog.com/jira/browse/HAP-849])
# Improve release staging with git ([HAP-842|https://www.jfrog.com/jira/browse/HAP-842])
# Bug fixes ([HAP-854|https://www.jfrog.com/jira/browse/HAP-854],&nbsp;[HAP-852|https://www.jfrog.com/jira/browse/HAP-852],&nbsp;[HAP-846|https://www.jfrog.com/jira/browse/HAP-846],&nbsp;[HAP-843|https://www.jfrog.com/jira/browse/HAP-843],&nbsp;[HAP-791|https://www.jfrog.com/jira/browse/HAP-791],&nbsp;[HAP-716|https://www.jfrog.com/jira/browse/HAP-716],&nbsp;[HAP-488|https://www.jfrog.com/jira/browse/HAP-488])

h2. 2.8.1 (10 Nov 2016)

# Bug fix ([HAP-841|https://www.jfrog.com/jira/browse/HAP-841])

h2. 2.8.0 (9 Nov 2016)

# Upload and download specs support to Jenkins generic jobs&nbsp;([HAP-823|https://www.jfrog.com/jira/browse/HAP-823])
# Pipeline docker enhancements ([HAP-834|https://www.jfrog.com/jira/browse/HAP-834])
# Support matrix params as part of the Maven and Gradle Pipeline DSL ([HAP-835|https://www.jfrog.com/jira/browse/HAP-835])
# Support credentials iD as part of the Docker Pipeline DSL ([HAP-838|https://www.jfrog.com/jira/browse/HAP-838])
# Support reading download and upload specs from FS ([HAP-838|https://www.jfrog.com/jira/browse/HAP-838])
# Bug fix ([HAP-836|https://www.jfrog.com/jira/browse/HAP-836], [HAP-830|https://www.jfrog.com/jira/browse/HAP-830], [HAP-829|https://www.jfrog.com/jira/browse/HAP-829], [HAP-822|https://www.jfrog.com/jira/browse/HAP-822], [HAP-824|https://www.jfrog.com/jira/browse/HAP-824], [HAP-816|https://www.jfrog.com/jira/browse/HAP-816], [HAP-828|https://www.jfrog.com/jira/browse/HAP-828], [HAP-826|https://www.jfrog.com/jira/browse/HAP-826])

h2. 2.7.2 (25 Sep 2016)

# Build-info support for docker images within pipeline jobs ([HAP-818|https://www.jfrog.com/jira/browse/HAP-818])
# Support for Maven builds within pipeline jobs ([HAP-759|https://www.jfrog.com/jira/browse/HAP-759])
# Support for Gradle builds within pipeline jobs ([HAP-760|https://www.jfrog.com/jira/browse/HAP-760])
# Support for Credentials plugin ([HAP-810|https://www.jfrog.com/jira/browse/HAP-810])
# Bug fix ([HAP-723|https://www.jfrog.com/jira/browse/HAP-723], [HAP-802|https://www.jfrog.com/jira/browse/HAP-802], [HAP-804|https://www.jfrog.com/jira/browse/HAP-804], [HAP-815|https://www.jfrog.com/jira/browse/HAP-815], [HAP-816|https://www.jfrog.com/jira/browse/HAP-816])

h2. 2.6.0 (7 Aug 2016)

# Pipeline support for build retention (discard old builds) [(HAP-796|https://www.jfrog.com/jira/browse/HAP-796])
# Pipeline support for build promotion, environment variables and system properties filtered collection ([HAP-787|https://www.jfrog.com/jira/browse/HAP-787])
# Expose release version and next development release property as environment variable ([HAP-798|https://www.jfrog.com/jira/browse/HAP-798])
# Bug fix&nbsp;([HAP-772|https://www.jfrog.com/jira/browse/HAP-772], [HAP-762|https://www.jfrog.com/jira/browse/HAP-762],&nbsp;[HAP-795|https://www.jfrog.com/jira/browse/HAP-795],&nbsp;[HAP-796|https://www.jfrog.com/jira/browse/HAP-796],&nbsp;[HAP-799|https://www.jfrog.com/jira/browse/HAP-799])

h2. 2.5.1 (30 Jun 2016)

# Bug fix&nbsp;([HAP-771|https://www.jfrog.com/jira/browse/HAP-771])

h2. 2.5.0 (9 Jun 2016)

# Pipeline support for Artifactory ([HAP-625|https://www.jfrog.com/jira/browse/HAP-625], [HAP-722|https://www.jfrog.com/jira/browse/HAP-722])
# Support for credentials using inside a Folder with the Credentials Plugin ([HAP-742|https://www.jfrog.com/jira/browse/HAP-742])
# Configure from the job a default release repository from configuration page ([HAP-688|https://www.jfrog.com/jira/browse/HAP-688])
# Allowing override Git credentials at artifactory release staging page ([HAP-626|https://www.jfrog.com/jira/browse/HAP-626])
# Bug fix ([HAP-754|https://www.jfrog.com/jira/browse/HAP-754], [HAP-752|https://www.jfrog.com/jira/browse/HAP-752], [HAP-747|https://www.jfrog.com/jira/browse/HAP-747], [HAP-736|https://www.jfrog.com/jira/browse/HAP-736], [HAP-726|https://www.jfrog.com/jira/browse/HAP-726], [HAP-722|https://www.jfrog.com/jira/browse/HAP-722], [HAP-715|https://www.jfrog.com/jira/browse/HAP-715], [HAP-712|https://www.jfrog.com/jira/browse/HAP-712], [HAP-704|https://www.jfrog.com/jira/browse/HAP-704], [HAP-695|https://www.jfrog.com/jira/browse/HAP-695], [HAP-688|https://www.jfrog.com/jira/browse/HAP-688], [HAP-671|https://www.jfrog.com/jira/browse/HAP-671], [HAP-642|https://www.jfrog.com/jira/browse/HAP-642], [HAP-639|https://www.jfrog.com/jira/browse/HAP-639])

h2. 2.4.7 (12 Jan 2016)

# Bug fix&nbsp;([HAP-678|https://www.jfrog.com/jira/browse/HAP-678])

h2. 2.4.6 (13 Dec 2015)

# Bug fix&nbsp;([HAP-674|https://www.jfrog.com/jira/browse/HAP-674])

h2. 2.4.5 (6 Dec 2015)

# Bug fixes&nbsp;([HAP-665|https://www.jfrog.com/jira/browse/HAP-665],&nbsp;[HAP-668|https://www.jfrog.com/jira/browse/HAP-668])

h2. 2.4.4 (17 Nov 2015)

# Bug fixes&nbsp;([HAP-661|https://www.jfrog.com/jira/browse/HAP-661],&nbsp;[HAP-663|https://www.jfrog.com/jira/browse/HAP-663],&nbsp;[HAP-664|https://www.jfrog.com/jira/browse/HAP-664])

h2. 2.4.1 (6 Nov 2015)

# Bug fix&nbsp;([HAP-660|https://www.jfrog.com/jira/browse/HAP-660])

h2. 2.4.0 (2 Nov 2015)

# Use the Credentials Plugin;([HAP-491|https://www.jfrog.com/jira/browse/HAP-491])
# FreeStyle Jobs - Support different Artifactory server for resolution and deployment;([HAP-616|https://www.jfrog.com/jira/browse/HAP-616])
# Jenkins should write the Artifactory Plugin version to the build log and build-info json;([HAP-620|https://www.jfrog.com/jira/browse/HAP-620])
# Bug fixes&nbsp;([HAP-396|https://www.jfrog.com/jira/browse/HAP-396],&nbsp;[HAP-534|https://www.jfrog.com/jira/browse/HAP-534],&nbsp;[HAP-583|https://www.jfrog.com/jira/browse/HAP-583],&nbsp;[HAP-616|https://www.jfrog.com/jira/browse/HAP-616],&nbsp;[HAP-617|https://www.jfrog.com/jira/browse/HAP-617],&nbsp;[HAP-618|https://www.jfrog.com/jira/browse/HAP-618],&nbsp;[HAP-621|https://www.jfrog.com/jira/browse/HAP-621],&nbsp;[HAP-622|https://www.jfrog.com/jira/browse/HAP-622],&nbsp;[HAP-641|https://www.jfrog.com/jira/browse/HAP-641],&nbsp;[HAP-646|https://www.jfrog.com/jira/browse/HAP-646])


h2. 2.3.1 (13 Jul 2015)

# Expose Release SCM Branch and Release SCM Tag as build variables;([HAP-606|https://www.jfrog.com/jira/browse/HAP-606])
# Bug fixes&nbsp;([HAP-397|https://www.jfrog.com/jira/browse/HAP-397],&nbsp;[HAP-550|https://www.jfrog.com/jira/browse/HAP-550],&nbsp;[HAP-576|https://www.jfrog.com/jira/browse/HAP-576],&nbsp;[HAP-593|https://www.jfrog.com/jira/browse/HAP-593],&nbsp;[HAP-603|https://www.jfrog.com/jira/browse/HAP-603],&nbsp;[HAP-604|https://www.jfrog.com/jira/browse/HAP-604],&nbsp;[HAP-605|https://www.jfrog.com/jira/browse/HAP-605],&nbsp;[HAP-609|https://www.jfrog.com/jira/browse/HAP-609])

h2. 2.3.0 (01 Apr 2015)

# Push build to Bintray directly from Jenkins UI ([HAP-566|https://www.jfrog.com/jira/browse/HAP-566])
# Multijob (plugin job) type not supported by Artifactory Plugin ([HAP-527|https://www.jfrog.com/jira/browse/HAP-527])
# Support multi-configuration projects ([HAP-409|https://www.jfrog.com/jira/browse/HAP-409])
# "Target-Repository" - need a dynamic parameter ([HAP-547|https://www.jfrog.com/jira/browse/HAP-547])
# Bug fixes&nbsp;([HAP-585|https://www.jfrog.com/jira/browse/HAP-585],&nbsp;[HAP-573|https://www.jfrog.com/jira/browse/HAP-573],&nbsp;[HAP-574|https://www.jfrog.com/jira/browse/HAP-574],&nbsp;[HAP-554|https://www.jfrog.com/jira/browse/HAP-554],&nbsp;[HAP-567|https://www.jfrog.com/jira/browse/HAP-567])

h2. 2.2.7 (27 Jan 2015)

# Add resolve artifacts from Artifactory to the Free Style Maven 3 integration&nbsp;([HAP-379|https://www.jfrog.com/jira/browse/HAP-379])
# Bug fixes&nbsp;([HAP-411|https://www.jfrog.com/jira/browse/HAP-411],&nbsp;[HAP-553|https://www.jfrog.com/jira/browse/HAP-553],&nbsp;[HAP-555|https://www.jfrog.com/jira/browse/HAP-555])

h2. 2.2.5 (18 Dec 2014)

# Maven jobs - Record Implicit Project Dependencies and Build-Time Dependencies ([HAP-539|https://www.jfrog.com/jira/browse/HAP-539])
# Possibility to refer to git url when using target remote for Release management ([HAP-525|https://www.jfrog.com/jira/browse/HAP-525])
# Bug fixes ([HAP-537|https://www.jfrog.com/jira/browse/HAP-537], [HAP-542|https://www.jfrog.com/jira/browse/HAP-542], [HAP-535|https://www.jfrog.com/jira/browse/HAP-535], [HAP-528|https://www.jfrog.com/jira/browse/HAP-528], [HAP-516|https://www.jfrog.com/jira/browse/HAP-516], [HAP-507|https://www.jfrog.com/jira/browse/HAP-507], [HAP-484|https://www.jfrog.com/jira/browse/HAP-484], [HAP-454|https://www.jfrog.com/jira/browse/HAP-454], [HAP-538|https://www.jfrog.com/jira/browse/HAP-538], [HAP-523|https://www.jfrog.com/jira/browse/HAP-523], [HAP-548|https://www.jfrog.com/jira/browse/HAP-548])

h2. 2.2.4 (21 Aug 2014)

# New Artifactory Release Management API ([HAP-503|https://www.jfrog.com/jira/browse/HAP-503])
# Compatibility with Gradle 2.0 ([GAP-153|https://www.jfrog.com/jira/browse/GAP-153])
# Job configuration page performance improvements ([HAP-492|https://www.jfrog.com/jira/browse/HAP-492])
# Bug fixes ([HAP-485|https://www.jfrog.com/jira/browse/HAP-485], [HAP-499|https://www.jfrog.com/jira/browse/HAP-499]), [HAP-502|https://www.jfrog.com/jira/browse/HAP-502], [HAP-508|https://www.jfrog.com/jira/browse/HAP-508], [HAP-509|https://www.jfrog.com/jira/browse/HAP-509],&nbsp;[HAP-301|https://www.jfrog.com/jira/browse/HAP-301])

h2. 2.2.3 (10 Jun 2014)

# Artifactory plugin is back to support Maven 2 ([HAP-459|https://www.jfrog.com/jira/browse/HAP-459])
# New feature, "Refresh Repositories" button, a convenient way to see your available repositories that exists in the configured Artifatory.
This feature also improves the Job page load response, and fixes the following bug ([HAP-483|https://www.jfrog.com/jira/browse/HAP-483])
# Supporting "Subversion plugin" version 2.+, on their compatibility with "Credentials plugin" ([HAP-486|https://www.jfrog.com/jira/browse/HAP-486])
# Bug fixes ([HAP-489|https://www.jfrog.com/jira/browse/HAP-489], [HAP-480|https://www.jfrog.com/jira/browse/HAP-480])

h2. 2.2.2 (21 May 2014)

# Split Resolution repository to Snapshot and Release ([HAP-442|https://www.jfrog.com/jira/browse/HAP-442])
# Supporting Git plugin credentials ([HAP-479|https://www.jfrog.com/jira/browse/HAP-479])
# Upgrading and also minimum supporting version of Git plugin 2.0.1 (recommended 2.0.4 for the credentials feature)
# Fix bug with Maven release plugin ([HAP-373|https://www.jfrog.com/jira/browse/HAP-373])
# Adding Version Control Url property to the Artifactory Build Info JSON ([HAP-478|https://www.jfrog.com/jira/browse/HAP-478])
# Bug fixes ([HAP-432|https://www.jfrog.com/jira/browse/HAP-432], [HAP-470|https://www.jfrog.com/jira/browse/HAP-470])

h2. 2.2.1 (11 Nov 2013)

# Fix for IllegalArgumentException in Deployment when no deployment is defined in Job ([HAP-241|https://www.jfrog.com/jira/browse/HAP-241])

h2. 2.2.0 (16 Oct 2013)

# Fix parent pom resolution issue ([HAP-236|https://www.jfrog.com/jira/browse/HAP-236]) from Jenkins 1.521
# Add support for maven 3.1.X
# Option to ignore artifacts that are not deploy because of include/exclude patterns from the build info ([HAP-444|https://www.jfrog.com/jira/browse/HAP-444])
# Enable credentials configuration for repository listing per project ([HAP-430|https://www.jfrog.com/jira/browse/HAP-430])
# [Bug fixes |https://issues.jfrog.org/jira/browse/HAP/fixforversion/12280]

h2. 2.1.8 (26 Aug 2013)

# Fix migration to Jenkins 1.528 ([HAP-428|https://www.jfrog.com/jira/browse/HAP-428])

h2. 2.1.7 (31 Jul 2013)

# Maven build failure during deployment ([HAP-420|https://www.jfrog.com/jira/browse/HAP-420])
# Bug fixes ([HAP-406|https://www.jfrog.com/jira/browse/HAP-406])

h2. 2.1.6 (24 Jun 2013)

# Fix plugin compatibility with Jenkins 1.519 ([HAP-418|https://issues.jfrog.org/browse/HAP-418])

h2. 2.1.5 (23 Apr 2013)

# Black duck integration - Automatic Black duck Code-Center integration for open source license governance and vulnerability control ([HAP-394|https://issues.jfrog.org/jira/browse/HAP-394])
# Gradle 1.5 support for maven and ivy publishes - New 'artifactory-publish' plugin with fully supported for Ivy and Maven publications ([GAP-138|https://issues.jfrog.org/jira/browse/GAP-138])
# Bug fixes ([HAP-341|https://issues.jfrog.org/jira/browse/HAP-341], [HAP-390|https://issues.jfrog.org/jira/browse/HAP-390], [HAP-366|https://issues.jfrog.org/jira/browse/HAP-366], [HAP-380|https://issues.jfrog.org/jira/browse/HAP-380])

h2. 2.1.4 (03 Feb 2013)

# Generic resolution interpolates environment variables ([HAP-352|https://issues.jfrog.org/jira/browse/HAP-352])
# Broken link issues ([HAP-362|https://issues.jfrog.org/jira/browse/HAP-362],[HAP-371|https://issues.jfrog.org/jira/browse/HAP-371],[HAP-360|https://issues.jfrog.org/jira/browse/HAP-360])
# [Minor bug fixes|https://issues.jfrog.org/jira/browse/HAP/fixforversion/11384#selectedTab=com.atlassian.jira.plugin.system.project%3Aversion-issues-panel]

h2. 2.1.3 (14 Oct 2012)

# Support include/exclude patterns of captured environment variables ([BI-143|https://issues.jfrog.org/jira/browse/BI-143])
# Bug fixes ([HAP-343|https://issues.jfrog.org/jira/browse/HAP-343],[HAP-4|https://issues.jfrog.org/jira/browse/HAP-4],[GAP-136|https://issues.jfrog.org/jira/browse/GAP-136])

h2. 2.1.2 (08 Aug 2012)

# Aggregating Jira issues from previous builds ([HAP-305|https://issues.jfrog.org/jira/browse/HAP-305])
# Bug fixes and improvements in generic deploy ([HAP-319|https://issues.jfrog.org/jira/browse/HAP-319], [HAP-329|https://issues.jfrog.org/jira/browse/HAP-329])

h2. 2.1.1 (31 May 2012)

# NPE on Maven2 builds ([HAP-316|https://issues.jfrog.org/jira/browse/HAP-316])

h2. 2.1.0 (24 May 2012)

# Support for cloudbees 'Folder plugin' ([HAP-312|https://issues.jfrog.org/jira/browse/HAP-312],[HAP-313|https://issues.jfrog.org/jira/browse/HAP-313])
# [Minor bug fixes |https://issues.jfrog.org/jira/browse/HAP/fixforversion/11080]

h2. 2.0.9 (15 May 2012)

# Fix UI integration for Jenkins 1.463\+ ([HAP-307|https://issues.jfrog.org/jira/browse/HAP-307])
# [Minor bug fixes |https://issues.jfrog.org/jira/browse/HAP/fixforversion/11204]

h2. 2.0.8 (09 May 2012)

# [Integration with Jira plugin|#jiraIntegration] ([HAP-297|https://issues.jfrog.org/jira/browse/HAP-297])
# Support build promotion for all build types ([HAP-264|https://issues.jfrog.org/jira/browse/HAP-264])
# Ability to leverage custom user plugins for [staging and promotion|http://wiki.jfrog.org/confluence/display/RTF/User+Plugins#UserPlugins-Promotions] ([HAP-271|https://issues.jfrog.org/jira/browse/HAP-271], [HAP-272|https://issues.jfrog.org/jira/browse/HAP-272])

h2. 2.0.7 (20 Apr 2012)

# Generic artifact resolution (based on patterns or other builds output) to freestyle builds ([HAP-292|https://issues.jfrog.org/jira/browse/HAP-292])
# Optimized deploy - when a binary with the same checksum as an uploaded artifact already exists in the Artifactory storage, a new local reference will be created instead of reuploading the same content
# Bug fixes

h2. 2.0.6 (19 Mar 2012)

# Support Perforce in release management ([HAP-265|https://issues.jfrog.org/jira/browse/HAP-265])
# Generic artifacts deployment ([HAP-153|https://issues.jfrog.org/jira/browse/HAP-153])
# [Bug fixes|https://issues.jfrog.org/jira/browse/HAP/fixforversion/10885]

h2. 2.0.5 (08 Dec 2011)

# Compatible with Gradle 1.0-milestone-6
# Different Artifactory servers can be used for resolution and deployment ([HAP-203|https://issues.jfrog.org/jira/browse/HAP-203])
# Using the new Jenkins user cause class to retrieve triggering user. *Requires Jenkins 1.428 or above* ([HAP-254|https://issues.jfrog.org/jira/browse/HAP-254])
# Release management with Git work with the latest plugin. Requires Git plugin v1.1.13 or above ([HAP-259|https://issues.jfrog.org/jira/browse/HAP-259], [JENKINS-12025|https://issues.jenkins-ci.org/browse/JENKINS-12025])
# Build-info exports an environment variable {{'BUILDINFO_PROPFILE'}} with the location of the generated build info properties file

h2. 2.0.4 (15 Aug 2011)

# Compatible with Jenkins 1.424\+ ([HAP-223|https://issues.jfrog.org/jira/browse/HAP-223])
# Resolved Maven 3 deployments intermittently failing on remote nodes ([HAP-220|https://issues.jfrog.org/jira/browse/HAP-220])
# Target repository for staged builds is now respected for Maven 3 builds ([HAP-219|https://issues.jfrog.org/jira/browse/HAP-219])
# Remote builds no longer fail when "always check out a fresh copy" is used ([HAP-224|https://issues.jfrog.org/jira/browse/HAP-224])

h2. 2.0.3 (26 Jul 2011)

# Support for Git Plugin v1.1.10\+ ([HAP-217|https://issues.jfrog.org/jira/browse/HAP-217])
# Native maven 3 jobs doesn't work if the Jenkins home path contains spaces ([HAP-218|https://issues.jfrog.org/jira/browse/HAP-218])
# Wrong tag URL is used when changing scm element during staged build ([HAP-215|https://issues.jfrog.org/jira/browse/HAP-215])

h2. 2.0.2 (07 Jul 2011)

# Support Jenkins version 1.417\+ ([HAP-211|https://issues.jfrog.org/jira/browse/HAP-211])

h2. 2.0.1 (19 May 2011)

# Maven deployment from remote slaves - artifact deployment for Maven builds will run directly from a remote slave when artifact archiving is turned off, saving valuable bandwidth and time normally consumed by copying artifacts back to master for archiving and publishing (requires Maven 3.0.2 and above)
# Staging of Maven builds now correctly fails if snapshot dependencies are used in POM files ([HAP-183|https://issues.jfrog.org/jira/browse/HAP-183])
# All staging and promotion commit comments are now customizable ([HAP-181|https://issues.jfrog.org/jira/browse/HAP-181])
# Fix for staged builds failing on remote slaves ([HAP-189|https://issues.jfrog.org/jira/browse/HAP-189])

h2. 2.0.0 (4 May 2011)

# [Release management with staging and promotion|Jenkins Artifactory Plugin - Release Management] support
# Support for forcing artifact resolution in Maven 3 to go through Artifactory ([HAP-144|https://issues.jfrog.org/jira/browse/HAP-144])
# [Isolated resolution|#buildIsolation] for snapshot build chains for Maven and Gradle
# Ability to attach custom properties to published artifacts ([HAP-138|https://issues.jfrog.org/jira/browse/HAP-138])
# Improved Ant/Ivy integration
# Improved Gradle integration
# Support saving pinned builds ([HAP-129|https://issues.jfrog.org/jira/browse/HAP-129], [HAP-140|https://issues.jfrog.org/jira/browse/HAP-140])
# Option to delete deployed artifacts when synchronizing build retention ([HAP-161|https://issues.jfrog.org/jira/browse/HAP-161])

h2. 1.4.3 (7 Apr 2011)

# Compatible to work with Jenkins 1.405 ([HAP-159|https://issues.jfrog.org/jira/browse/HAP-159])

h2. 1.4.2 (27 Jan 2011)

# The plugin now works with Jenkins' new native Maven 3 jobs ([HAP-130|http://issues.jfrog.org/jira/browse/HAP-130], [HAP-131|http://issues.jfrog.org/jira/browse/HAP-131])

h2. 1.4.1 (10 Jan 2011)

# Synchronize the build retention policy in Artifactory with Jenkins' build retention settings (requires Artifactory Pro) ([HAP-90|http://issues.jfrog.org/jira/browse/HAP-90])

h2. 1.4.0 (09 Jan 2011)

# Improved Gradle support
# Optimized checksum-based publishing with Artifactory 2.3.2\+ that saves redeploying the same binaries ([RTFACT-3808|https://issues.jfrog.org/jira/browse/RTFACT-3808])
# Remote agent support for Gradle, Maven 3 and Ivy builds ([HAP-59|http://issues.jfrog.org/jira/browse/HAP-59], [HAP-60|http://issues.jfrog.org/jira/browse/HAP-60], [HAP-114|http://issues.jfrog.org/jira/browse/HAP-114])
# Configurable ivy/artifact patterns for Ivy builds ([HAP-120|https://issues.jfrog.org/jira/browse/HAP-120])

h2. 1.3.6 (21 Nov 2010)

# Allow specifying include/exclude patterns for published artifacts ([HAP-61|http://issues.jfrog.org/jira/browse/HAP-61]).
# Support for custom Ivy/artifact patterns for Gradle published artifacts ([HAP-108|http://issues.jfrog.org/jira/browse/HAP-108]).

h2. 1.3.5 (7 Nov 2010)

# Fixed integration with Jenkins maven release plugin. ([HAP-93|http://issues.jfrog.org/jira/browse/HAP-93])
# Global Artifactory credentials ([HAP-53|http://issues.jfrog.org/jira/browse/HAP-53])
# Auto preselect target release and snapshot repositories. ([HAP-98|http://issues.jfrog.org/jira/browse/HAP-98])

h2. 1.3.4 (28 Oct 2010)

# Fixed Gradle support

h2. 1.3.3 (21 Oct 2010)

# Update version of the Gradle extractor.

h2. 1.3.2 (19 Oct 2010)

# Support for running license checks on third-party dependencies and sending license violation email notifications ([HAP-91|http://issues.jfrog.org/jira/browse/HAP-91])

h2. 1.3.1 (19 Sep 2010)

# Maven 2 and Maven 3 support two target deploy repositories - releases and snapshots ([HAP-29|http://issues.jfrog.org/jira/browse/HAP-29])
# Maven 2 - Allow deployment even if the build is unstable ([HAP-77|http://issues.jfrog.org/jira/browse/HAP-77])
# Link to the build info next to each build that deployed build info ([HAP-80|http://issues.jfrog.org/jira/browse/HAP-80])
# Link to the builds list in the jobs' main page ([HAP-41|http://issues.jfrog.org/jira/browse/HAP-41])
# Allow skipping the creation and deployment of the build info ([HAP-47|http://issues.jfrog.org/jira/browse/HAP-47])

h2. 1.3.0 (26 Aug 2010)

# *New support for Maven 3 Beta builds\!*

h2. 1.2.0 (26 Jul 2010)

# *New support for Ivy builds\!* (many thanks to Timo Bingaman for adding the hooks to the the [Jenkins Ivy Plugin|Ivy Plugin])
# Supporting incremental builds ([HAP-52|http://issues.jfrog.org/jira/browse/HAP-52])
# Testing connection to Artifactory in the main configuration page
# Update Jenkins dependency to version 1.358
# Fixed [HAP-51|http://issues.jfrog.org/jira/browse/HAP-51] \- tar.gz files were deployed as .gz files

h2. 1.1.0 (09 Jun 2010)

# Added support for gradle jobs, see: [http://www.jfrog.org/confluence/x/tYK5]
# Connection timeout setting changed from milliseconds to seconds.
# Allow bypassing the http proxy ([5892@issue])

h2. 1.0.7 (04 Mar 2010)

# Improved Artifactory client
# Another fix for duplicate pom deployments
# Sending parent (upstream) build information
# Displaying only local repositories when working with Artifactory 2.2.0\+

h2. 1.0.6 (16 Feb 2010)

# Fixed a bug in the plugin that in some cases skipped deployment of attached artifacts
# In some cases, pom were deployed twice
# MD5 hash is now set on all files
# Dependency type is passed to the build info

h2. 1.0.5 (22 Jan 2010)

# Using Jackson as JSON generator for BuildInfo (will fix issues with Hudson version 1.340-1.341)

h2. 1.0.4 (15 Jan 2010)

# Accept Artifactory urls with slash at the end
# Fixed JSON object creation to work with Hudson 1.340

h2. 1.0.3 (07 Jan 2010)

# Using preemptive basic authentication

h2. 1.0.2 (22 Dec 2009)

# Configurable connection timeout

h2. 1.0.1 (16 Dec 2009)

# Fixed Artifactory plugin relative location (for images and help files)

h2. 1.0.0 (14 Dec 2009)

# First stable release